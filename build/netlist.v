/* Generated by Yosys 0.9+4276 (git sha1 75a4cdfc8a, gcc 10.3.0 -fPIC -Os) */

(* top =  1  *)
(* src = "cpu-main.v:19.1-58.10" *)
module plinkoboard(clk, rst, randChoice, count1, count2, count3, count4, count5, count6, count7, count8, ballLocation);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  (* force_downto = 32'd1 *)
  (* src = "cpu-main.v:45.25-45.44|/nix/store/1v0k14kwyd2vndbwlbarqmdkyh80m5rv-yosys-0.9+4276/bin/../share/yosys/techmap.v:270.23-270.24" *)
  (* unused_bits = "1 2 3 4" *)
  wire [4:0] _102_;
  (* force_downto = 32'd1 *)
  (* src = "cpu-main.v:45.25-45.44|/nix/store/1v0k14kwyd2vndbwlbarqmdkyh80m5rv-yosys-0.9+4276/bin/../share/yosys/techmap.v:270.26-270.27" *)
  wire [4:0] _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire _109_;
  wire _110_;
  wire _111_;
  wire _112_;
  wire _113_;
  wire _114_;
  wire _115_;
  wire _116_;
  wire _117_;
  wire _118_;
  wire _119_;
  wire _120_;
  wire _121_;
  wire _122_;
  wire _123_;
  wire _124_;
  wire _125_;
  wire _126_;
  wire _127_;
  wire _128_;
  (* src = "cpu-main.v:29.15-29.27" *)
  output [2:0] ballLocation;
  (* src = "cpu-main.v:20.9-20.12" *)
  input clk;
  (* src = "cpu-main.v:22.16-22.22" *)
  output [4:0] count1;
  reg [4:0] count1;
  (* src = "cpu-main.v:22.24-22.30" *)
  output [4:0] count2;
  reg [4:0] count2;
  (* src = "cpu-main.v:22.32-22.38" *)
  output [4:0] count3;
  reg [4:0] count3;
  (* src = "cpu-main.v:22.40-22.46" *)
  output [4:0] count4;
  reg [4:0] count4;
  (* src = "cpu-main.v:22.48-22.54" *)
  output [4:0] count5;
  reg [4:0] count5;
  (* src = "cpu-main.v:22.56-22.62" *)
  output [4:0] count6;
  reg [4:0] count6;
  (* src = "cpu-main.v:22.64-22.70" *)
  output [4:0] count7;
  reg [4:0] count7;
  (* src = "cpu-main.v:22.72-22.78" *)
  output [4:0] count8;
  reg [4:0] count8;
  (* src = "cpu-main.v:21.14-21.24" *)
  input [6:0] randChoice;
  (* src = "cpu-main.v:20.14-20.17" *)
  input rst;
  assign _068_ = ~ballLocation[2];
  assign _069_ = ~ballLocation[1];
  assign _070_ = ~(ballLocation[1] & ballLocation[0]);
  assign _071_ = ~(ballLocation[2] | _070_);
  assign _006_ = ~_071_;
  assign _072_ = ballLocation[1] | ballLocation[0];
  assign _073_ = ballLocation[2] | _072_;
  assign _007_ = ~_073_;
  assign _074_ = _069_ & ballLocation[0];
  assign _075_ = ballLocation[2] & _074_;
  assign _000_ = ~_075_;
  assign _076_ = ~(_068_ | _072_);
  assign _003_ = ~_076_;
  assign _077_ = _069_ | ballLocation[0];
  assign _078_ = ~(ballLocation[2] | _077_);
  assign _004_ = ~_078_;
  assign _079_ = ~(_068_ | _070_);
  assign _005_ = ~_079_;
  assign _080_ = _068_ & _074_;
  assign _001_ = ~_080_;
  assign _081_ = ~(_068_ | _077_);
  assign _002_ = ~_081_;
  assign _082_ = ~(count3[0] & _078_);
  assign _083_ = ~(count5[0] & _076_);
  assign _084_ = ~(count8[0] & _079_);
  assign _085_ = ~(count2[0] & _080_);
  assign _086_ = ~(count4[0] & _071_);
  assign _087_ = ~(count6[0] & _075_);
  assign _088_ = ~(count7[0] & _081_);
  assign _089_ = _082_ & _084_;
  assign _090_ = _083_ & _088_;
  assign _091_ = _089_ & _090_;
  assign _092_ = _085_ & _086_;
  assign _093_ = _073_ & _087_;
  assign _094_ = _092_ & _093_;
  assign _095_ = ~(_091_ & _094_);
  assign _096_ = count1[0] | _073_;
  assign _097_ = _095_ & _096_;
  assign _102_[0] = ~_097_;
  assign _098_ = ~(count8[1] & _079_);
  assign _099_ = ~(count2[1] & _080_);
  assign _100_ = ~(count6[1] & _075_);
  assign _101_ = _099_ & _100_;
  assign _008_ = ~(count3[1] & _078_);
  assign _009_ = ~(count7[1] & _081_);
  assign _010_ = ~(count4[1] & _071_);
  assign _011_ = ~(count5[1] & _076_);
  assign _012_ = _010_ & _011_;
  assign _013_ = _101_ & _012_;
  assign _014_ = _098_ & _008_;
  assign _015_ = _073_ & _009_;
  assign _016_ = _014_ & _015_;
  assign _017_ = ~(_013_ & _016_);
  assign _018_ = count1[1] | _073_;
  assign _019_ = _017_ & _018_;
  assign _020_ = _097_ & _019_;
  assign _103_[1] = _097_ ^ _019_;
  assign _021_ = ~(count4[2] & _071_);
  assign _022_ = ~(count8[2] & _079_);
  assign _023_ = ~(count2[2] & _080_);
  assign _024_ = _022_ & _023_;
  assign _025_ = _021_ & _024_;
  assign _026_ = ~(count6[2] & _075_);
  assign _027_ = ~(count7[2] & _081_);
  assign _028_ = _026_ & _027_;
  assign _029_ = ~(count5[2] & _076_);
  assign _030_ = ~(count3[2] & _078_);
  assign _031_ = _029_ & _030_;
  assign _032_ = _028_ & _031_;
  assign _033_ = _025_ & _032_;
  assign _034_ = ~(count1[2] & _007_);
  assign _035_ = ~(_033_ & _034_);
  assign _036_ = _020_ & _035_;
  assign _103_[2] = _020_ ^ _035_;
  assign _037_ = ~(count4[3] & _071_);
  assign _038_ = ~(count6[3] & _075_);
  assign _039_ = ~(count3[3] & _078_);
  assign _040_ = _038_ & _039_;
  assign _041_ = _037_ & _040_;
  assign _042_ = ~(count5[3] & _076_);
  assign _043_ = ~(count8[3] & _079_);
  assign _044_ = _042_ & _043_;
  assign _045_ = ~(count2[3] & _080_);
  assign _046_ = ~(count7[3] & _081_);
  assign _047_ = _045_ & _046_;
  assign _048_ = _044_ & _047_;
  assign _049_ = _041_ & _048_;
  assign _050_ = ~(count1[3] & _007_);
  assign _051_ = ~(_049_ & _050_);
  assign _052_ = ~(_036_ & _051_);
  assign _103_[3] = _036_ ^ _051_;
  assign _053_ = ~(count2[4] & _080_);
  assign _054_ = ~(count8[4] & _079_);
  assign _055_ = _053_ & _054_;
  assign _056_ = ~(count7[4] & _081_);
  assign _057_ = ~(count5[4] & _076_);
  assign _058_ = _056_ & _057_;
  assign _059_ = _055_ & _058_;
  assign _060_ = ~(count6[4] & _075_);
  assign _061_ = ~(count1[4] & _007_);
  assign _062_ = _060_ & _061_;
  assign _063_ = ~(count4[4] & _071_);
  assign _064_ = ~(count3[4] & _078_);
  assign _065_ = _063_ & _064_;
  assign _066_ = _062_ & _065_;
  assign _067_ = _059_ & _066_;
  assign _103_[4] = _052_ ^ _067_;
  (* src = "cpu-main.v:39.3-47.6" *)
  always @(posedge clk)
    if (rst) count1[0] <= 1'h0;
    else if (_007_) count1[0] <= _102_[0];
  (* src = "cpu-main.v:39.3-47.6" *)
  always @(posedge clk)
    if (rst) count1[1] <= 1'h0;
    else if (_007_) count1[1] <= _103_[1];
  (* src = "cpu-main.v:39.3-47.6" *)
  always @(posedge clk)
    if (rst) count1[2] <= 1'h0;
    else if (_007_) count1[2] <= _103_[2];
  (* src = "cpu-main.v:39.3-47.6" *)
  always @(posedge clk)
    if (rst) count1[3] <= 1'h0;
    else if (_007_) count1[3] <= _103_[3];
  (* src = "cpu-main.v:39.3-47.6" *)
  always @(posedge clk)
    if (rst) count1[4] <= 1'h0;
    else if (_007_) count1[4] <= _103_[4];
  (* src = "cpu-main.v:39.3-47.6" *)
  always @(posedge clk)
    if (rst) count2[0] <= 1'h0;
    else if (!_001_) count2[0] <= _102_[0];
  (* src = "cpu-main.v:39.3-47.6" *)
  always @(posedge clk)
    if (rst) count2[1] <= 1'h0;
    else if (!_001_) count2[1] <= _103_[1];
  (* src = "cpu-main.v:39.3-47.6" *)
  always @(posedge clk)
    if (rst) count2[2] <= 1'h0;
    else if (!_001_) count2[2] <= _103_[2];
  (* src = "cpu-main.v:39.3-47.6" *)
  always @(posedge clk)
    if (rst) count2[3] <= 1'h0;
    else if (!_001_) count2[3] <= _103_[3];
  (* src = "cpu-main.v:39.3-47.6" *)
  always @(posedge clk)
    if (rst) count2[4] <= 1'h0;
    else if (!_001_) count2[4] <= _103_[4];
  (* src = "cpu-main.v:39.3-47.6" *)
  always @(posedge clk)
    if (rst) count3[0] <= 1'h0;
    else if (!_004_) count3[0] <= _102_[0];
  (* src = "cpu-main.v:39.3-47.6" *)
  always @(posedge clk)
    if (rst) count3[1] <= 1'h0;
    else if (!_004_) count3[1] <= _103_[1];
  (* src = "cpu-main.v:39.3-47.6" *)
  always @(posedge clk)
    if (rst) count3[2] <= 1'h0;
    else if (!_004_) count3[2] <= _103_[2];
  (* src = "cpu-main.v:39.3-47.6" *)
  always @(posedge clk)
    if (rst) count3[3] <= 1'h0;
    else if (!_004_) count3[3] <= _103_[3];
  (* src = "cpu-main.v:39.3-47.6" *)
  always @(posedge clk)
    if (rst) count3[4] <= 1'h0;
    else if (!_004_) count3[4] <= _103_[4];
  (* src = "cpu-main.v:39.3-47.6" *)
  always @(posedge clk)
    if (rst) count4[0] <= 1'h0;
    else if (!_006_) count4[0] <= _102_[0];
  (* src = "cpu-main.v:39.3-47.6" *)
  always @(posedge clk)
    if (rst) count4[1] <= 1'h0;
    else if (!_006_) count4[1] <= _103_[1];
  (* src = "cpu-main.v:39.3-47.6" *)
  always @(posedge clk)
    if (rst) count4[2] <= 1'h0;
    else if (!_006_) count4[2] <= _103_[2];
  (* src = "cpu-main.v:39.3-47.6" *)
  always @(posedge clk)
    if (rst) count4[3] <= 1'h0;
    else if (!_006_) count4[3] <= _103_[3];
  (* src = "cpu-main.v:39.3-47.6" *)
  always @(posedge clk)
    if (rst) count4[4] <= 1'h0;
    else if (!_006_) count4[4] <= _103_[4];
  (* src = "cpu-main.v:39.3-47.6" *)
  always @(posedge clk)
    if (rst) count5[0] <= 1'h0;
    else if (!_003_) count5[0] <= _102_[0];
  (* src = "cpu-main.v:39.3-47.6" *)
  always @(posedge clk)
    if (rst) count5[1] <= 1'h0;
    else if (!_003_) count5[1] <= _103_[1];
  (* src = "cpu-main.v:39.3-47.6" *)
  always @(posedge clk)
    if (rst) count5[2] <= 1'h0;
    else if (!_003_) count5[2] <= _103_[2];
  (* src = "cpu-main.v:39.3-47.6" *)
  always @(posedge clk)
    if (rst) count5[3] <= 1'h0;
    else if (!_003_) count5[3] <= _103_[3];
  (* src = "cpu-main.v:39.3-47.6" *)
  always @(posedge clk)
    if (rst) count5[4] <= 1'h0;
    else if (!_003_) count5[4] <= _103_[4];
  (* src = "cpu-main.v:39.3-47.6" *)
  always @(posedge clk)
    if (rst) count6[0] <= 1'h0;
    else if (!_000_) count6[0] <= _102_[0];
  (* src = "cpu-main.v:39.3-47.6" *)
  always @(posedge clk)
    if (rst) count6[1] <= 1'h0;
    else if (!_000_) count6[1] <= _103_[1];
  (* src = "cpu-main.v:39.3-47.6" *)
  always @(posedge clk)
    if (rst) count6[2] <= 1'h0;
    else if (!_000_) count6[2] <= _103_[2];
  (* src = "cpu-main.v:39.3-47.6" *)
  always @(posedge clk)
    if (rst) count6[3] <= 1'h0;
    else if (!_000_) count6[3] <= _103_[3];
  (* src = "cpu-main.v:39.3-47.6" *)
  always @(posedge clk)
    if (rst) count6[4] <= 1'h0;
    else if (!_000_) count6[4] <= _103_[4];
  (* src = "cpu-main.v:39.3-47.6" *)
  always @(posedge clk)
    if (rst) count7[0] <= 1'h0;
    else if (!_002_) count7[0] <= _102_[0];
  (* src = "cpu-main.v:39.3-47.6" *)
  always @(posedge clk)
    if (rst) count7[1] <= 1'h0;
    else if (!_002_) count7[1] <= _103_[1];
  (* src = "cpu-main.v:39.3-47.6" *)
  always @(posedge clk)
    if (rst) count7[2] <= 1'h0;
    else if (!_002_) count7[2] <= _103_[2];
  (* src = "cpu-main.v:39.3-47.6" *)
  always @(posedge clk)
    if (rst) count7[3] <= 1'h0;
    else if (!_002_) count7[3] <= _103_[3];
  (* src = "cpu-main.v:39.3-47.6" *)
  always @(posedge clk)
    if (rst) count7[4] <= 1'h0;
    else if (!_002_) count7[4] <= _103_[4];
  (* src = "cpu-main.v:39.3-47.6" *)
  always @(posedge clk)
    if (rst) count8[0] <= 1'h0;
    else if (!_005_) count8[0] <= _102_[0];
  (* src = "cpu-main.v:39.3-47.6" *)
  always @(posedge clk)
    if (rst) count8[1] <= 1'h0;
    else if (!_005_) count8[1] <= _103_[1];
  (* src = "cpu-main.v:39.3-47.6" *)
  always @(posedge clk)
    if (rst) count8[2] <= 1'h0;
    else if (!_005_) count8[2] <= _103_[2];
  (* src = "cpu-main.v:39.3-47.6" *)
  always @(posedge clk)
    if (rst) count8[3] <= 1'h0;
    else if (!_005_) count8[3] <= _103_[3];
  (* src = "cpu-main.v:39.3-47.6" *)
  always @(posedge clk)
    if (rst) count8[4] <= 1'h0;
    else if (!_005_) count8[4] <= _103_[4];
  assign _104_ = ~randChoice[3];
  assign _105_ = randChoice[1] | randChoice[0];
  assign _106_ = randChoice[1] & randChoice[0];
  assign _107_ = randChoice[2] | _106_;
  assign _108_ = _105_ & _107_;
  assign _109_ = ~(randChoice[2] & _106_);
  assign _110_ = ~(_108_ & _109_);
  assign _111_ = randChoice[2] | _105_;
  assign _112_ = _110_ & _111_;
  assign _113_ = randChoice[3] & _112_;
  assign _114_ = randChoice[3] ^ _112_;
  assign _115_ = ~(randChoice[4] & _114_);
  assign _116_ = randChoice[4] ^ _114_;
  assign _117_ = ~(randChoice[5] & _116_);
  assign _118_ = randChoice[5] ^ _116_;
  assign _119_ = randChoice[6] & _118_;
  assign ballLocation[0] = randChoice[6] ^ _118_;
  assign _120_ = _104_ | _109_;
  assign _121_ = _108_ | _113_;
  assign _122_ = ~_121_;
  assign _123_ = ~(_120_ & _121_);
  assign _124_ = _115_ & _117_;
  assign _125_ = _123_ ^ _124_;
  assign _126_ = ~(_119_ & _125_);
  assign ballLocation[1] = _119_ ^ _125_;
  assign _127_ = _122_ | _124_;
  assign _128_ = _120_ & _127_;
  assign ballLocation[2] = ~(_126_ & _128_);
  assign _103_[0] = _102_[0];
endmodule
